#version 330

layout ( location = 0 ) in vec3 position;
layout ( location = 1 ) in vec2 textureCoordinates;
layout ( location = 2 ) in vec3 normal;
layout ( location = 3 ) in vec3 tangent;

uniform mat4 transformation;
uniform mat4 projection;
uniform mat4 view;
uniform vec4 plane;
uniform mat4 lightProjection;
uniform mat4 lightView;
uniform mat4 bias;

out vec2 pass_textureCoordinates;
out vec3 pass_mvtToCamera;
out mat3 pass_mvTangentSpace;
out vec3 pass_mvPosition;
out vec3 pass_mvNormal;
out vec4 pass_mlightviewVertexPos;
			
void main(void)
{
	vec4 worldPosition = transformation * vec4(position,1.0);
	gl_ClipDistance[0] = dot(worldPosition, plane);
	mat4 modelViewMatrix = view * transformation;
	vec4 positionRelativeToCam = modelViewMatrix * vec4(position,1.0);
	pass_mvPosition = positionRelativeToCam.xyz;
	gl_Position = projection * positionRelativeToCam;
	
	pass_textureCoordinates = (textureCoordinates);
	
	vec3 surfaceNormal = normalize((modelViewMatrix * vec4(normal,0.0)).xyz);
	pass_mvNormal = surfaceNormal;
	
	vec3 norm = surfaceNormal;
	vec3 tang = normalize((modelViewMatrix * vec4(tangent, 0.0)).xyz);
	tang = normalize(tang - dot(tang, norm) * norm);
	vec3 bitang = normalize(cross(norm, tang));
	
	mat3 toTangentSpace = mat3(
		tang.x, bitang.x, norm.x,
		tang.y, bitang.y, norm.y,
		tang.z, bitang.z, norm.z
	);
	pass_mvTangentSpace = toTangentSpace;

	pass_mvtToCamera = toTangentSpace * (-positionRelativeToCam.xyz);
    pass_mlightviewVertexPos = bias * lightProjection * lightView * vec4(position, 1.0);
}